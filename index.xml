<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Junu-Devlog</title>
    <link>https://junu0516.github.io/</link>
    <description>Recent content on Junu-Devlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://junu0516.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>드롭박스 테스트</title>
      <link>https://junu0516.github.io/posts/dropbox/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/dropbox/</guid>
      <description>설치 
Je &amp;amp; Selina
Ebony &amp;amp; Bibi
Sol</description>
    </item>
    
    <item>
      <title>스위프트 Protocol Extension과 Method Dispatch</title>
      <link>https://junu0516.github.io/posts/20220409/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/20220409/</guid>
      <description>Extension의 일반적으로 알려진 이점 Swift의 extension 키워드는 일반적으로 아래와 같은 기능을 수행</description>
    </item>
    
    <item>
      <title>소하(蕭何)의 삶을 살고 싶다.</title>
      <link>https://junu0516.github.io/posts/20220307/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/20220307/</guid>
      <description>&amp;ldquo;무릇 군영의 장막 안에서 계책을 마련하여 천리 밖에서 벌어지는 싸움을 승리로 이끄는 것은 내가 장량만 못하고, 나라를 안정시키고 백성들을 위무하며, 군량을 준비하여 그 공급이 끊어지지 않게 하는 것은 내가 소하(蕭何)보다 못하고, 백만대군을 이끌고 싸우면 항상 이기고, 성을 공격하면 반드시 함락시키는 데는 내가 한신만 못하다.</description>
    </item>
    
    <item>
      <title>스위프트의 Delegate Pattern 정리</title>
      <link>https://junu0516.github.io/posts/swift_delegate/</link>
      <pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/swift_delegate/</guid>
      <description>스위프트로 다양한 ViewController을 다루면서 Delegate Procotol이라는 개념을 처음 접하게 되었다. 간단히 말해 특정 이벤트나 액션이 일어나면, 미리 위임자로 지정된 delegate object가 다른 객체를 대신해 특정 행위를 하게되는 형태를 의미한다.</description>
    </item>
    
    <item>
      <title>Operating System Concepts - Chapter 4 요약</title>
      <link>https://junu0516.github.io/posts/os_chapter4/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/os_chapter4/</guid>
      <description>공룡책 Ch 4 요약 (원서를 읽고 요약하는 과정에서 잘못된 내용이 있을 수 있습니다.</description>
    </item>
    
    <item>
      <title>옵셔널(Optional)과 옵셔널 체이닝(Optional Chaining)</title>
      <link>https://junu0516.github.io/posts/swift_optional/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/swift_optional/</guid>
      <description>​
스위프트의 주요 특징 중 하나인 옵셔널과 옵셔널 체이닝에 대해 정리해보았다.</description>
    </item>
    
    <item>
      <title>Operating System Concepts - Chapter 3 요약</title>
      <link>https://junu0516.github.io/posts/os_chapter3/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/os_chapter3/</guid>
      <description>공룡책 Ch 3 요약 (원서를 읽고 요약하는 과정에서 잘못된 내용이 있을 수 있습니다.</description>
    </item>
    
    <item>
      <title>스위프트 클로저(closure) 개념 정리</title>
      <link>https://junu0516.github.io/posts/swift_closure/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/swift_closure/</guid>
      <description>​
자바를 사용하다가 스위프트를 사용하면서 체감하는 제일 큰 차이는 함수형 프로그래밍의 사용인 것 같다.</description>
    </item>
    
    <item>
      <title>스위프트로 연결리스트(Linked List) 구현하기</title>
      <link>https://junu0516.github.io/posts/linked_list_swift/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/linked_list_swift/</guid>
      <description>​
1. 연결리스트(Linked List)  추상형 자료형 중 리스트(List) 를 구체화 한 자료구조로, 데이터를 포함하는 노드(Node) 들이 다음(혹은 이전) 노드와 연결된 포인터를 통해 서로 연결되어 있는 형태이다.</description>
    </item>
    
    <item>
      <title>Operating System Concepts - Chapter 2 요약</title>
      <link>https://junu0516.github.io/posts/os_chapter2/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/os_chapter2/</guid>
      <description>공룡책 Ch 2 요약 (원서를 읽고 요약하는 과정에서 잘못된 내용이 있을 수 있습니다.</description>
    </item>
    
    <item>
      <title>Http 메시지와 Https 통신</title>
      <link>https://junu0516.github.io/posts/httpmsg_https/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/httpmsg_https/</guid>
      <description>Http 메시지의 구조와, 암호화가 추가된 Https 통신의 특징에 대해 알아보도록 한다.</description>
    </item>
    
    <item>
      <title>TCP/IP 4계층의 이해</title>
      <link>https://junu0516.github.io/posts/tcp_ip_4%EA%B3%84%EC%B8%B5/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/tcp_ip_4%EA%B3%84%EC%B8%B5/</guid>
      <description>TCP/IP 4계층에서 각각의 계층별 특징에 대해 알아보도록 하자.
​
네트워크 이론에서 흔히 접하는 OSI 7계층은 1984년 ISO에서 개발한 네트워크 통신 모델로, 네트워크 통신 구조를 크게 7개의 계층(Layer) 개념으로 나눠 설명한 것이다.</description>
    </item>
    
    <item>
      <title>Operating System Concepts - Chapter 1 요약</title>
      <link>https://junu0516.github.io/posts/os_chapter1/</link>
      <pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/os_chapter1/</guid>
      <description>공룡책 Ch 1 요약 (원서를 읽고 요약하는 과정에서 잘못된 내용이 있을 수 있습니다.</description>
    </item>
    
    <item>
      <title>Spring DI와 IoC</title>
      <link>https://junu0516.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EC%97%90%EC%84%9C%EC%9D%98_di%EC%99%80_ioc/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://junu0516.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EC%97%90%EC%84%9C%EC%9D%98_di%EC%99%80_ioc/</guid>
      <description>Spring DI와 IoC의 개념에 대해 알아보자.
1. DI(Dependency Injection, 의존성 주입) DI(Dependency Injection) 은 스프링 프레임워크의 의존성 주입을 일컫는 말로, 특정 객체를 미리 생성 후 주입하는 것을 말한다.</description>
    </item>
    
  </channel>
</rss>
